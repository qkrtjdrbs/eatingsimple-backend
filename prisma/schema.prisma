// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int                 @id @default(autoincrement())
  name              String
  username          String              @unique
  email             String              @unique
  password          String
  bio               String?
  avatar            String?
  recipes           Recipe[]
  recipeLikes       RecipeLike[]
  photos            Photo[]
  comments          Comment[]
  commentLikes      CommentLike[]
  nestedComment     NestedComment[]
  nestedCommentLike NestedCommentLike[]
  notification      Notification[]
  message           Message[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Recipe {
  id          Int          @id @default(autoincrement())
  title       String
  content     String
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  photos      Photo[]
  recipeLikes RecipeLike[]
  comments    Comment[]
  tags        Tag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  tag       String   @unique
  recipes   Recipe[]
  createdAt DateTime @default(now())
}

model Photo {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  file      String   @unique
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RecipeLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  Int
  createdAt DateTime @default(now())

  @@unique([recipeId, userId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
}

model NestedCommentLike {
  id              Int            @id @default(autoincrement())
  user            User           @relation(fields: [userId], references: [id])
  userId          Int
  nestedComment   NestedComment? @relation(fields: [nestedCommentId], references: [id])
  nestedCommentId Int?
  createdAt       DateTime       @default(now())

  @@unique([nestedCommentId, userId])
}

model Comment {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int
  recipe        Recipe          @relation(fields: [recipeId], references: [id])
  recipeId      Int
  payload       String
  commentLikes  CommentLike[]
  nestedComment NestedComment[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model NestedComment {
  id                Int                 @id @default(autoincrement())
  user              User                @relation(fields: [userId], references: [id])
  userId            Int
  payload           String
  nestedCommentLike NestedCommentLike[]
  nestingComment    Comment?            @relation(fields: [nestingId], references: [id])
  nestingId         Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Notification {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id])
  userId  Int
  message Message[]
}

model Message {
  id             Int          @id @default(autoincrement())
  kind           String
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId Int
  createdAt      DateTime     @default(now())
}
